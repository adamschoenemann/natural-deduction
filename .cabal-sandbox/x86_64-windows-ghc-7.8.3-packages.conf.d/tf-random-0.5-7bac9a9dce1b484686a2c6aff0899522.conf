name: tf-random
version: 0.5
id: tf-random-0.5-7bac9a9dce1b484686a2c6aff0899522
license: BSD3
copyright:
maintainer: Michał Pałka <michal.palka@chalmers.se>
stability:
homepage:
package-url:
synopsis: High-quality splittable pseudorandom number generator
description: This package contains an implementation of a high-quality splittable pseudorandom number generator. The generator is based on a cryptographic hash function built on top of the ThreeFish block cipher. See the paper /Splittable Pseudorandom Number Generators Using Cryptographic Hashing/ by Claessen, Pałka for details and the rationale of the design.
             .
             The package provides the following:
             .
             * A splittable PRNG that implements the standard 'System.Random.RandomGen' class.
             .
             * The generator also implements an alternative version of the 'System.Random.TF.Gen.RandomGen' class (exported from "System.Random.TF.Gen"), which requires the generator to return pseudorandom integers from the full 32-bit range, and contains an n-way split function.
             .
             * An alternative version of the @Random@ class is provided, which is linked to the new @RandomGen@ class, together with @Random@ instances for some integral types.
             .
             * Two functions for initialising the generator with a non-deterministic seed: one using the system time, and one using the @\/dev\/urandom@ UNIX special file.
             .
             The package uses an adapted version of the reference C implementation of ThreeFish from the reference package of the Skein hash function (<https://www.schneier.com/skein.html>), originally written by Doug Whiting.
             .
             Please note that even though the generator provides very high-quality pseudorandom numbers, it has not been designed with cryptographic applications in mind.
category: Random
author: Michał Pałka <michal.palka@chalmers.se>
exposed: True
exposed-modules: System.Random.TF System.Random.TF.Gen
                 System.Random.TF.Init System.Random.TF.Instances
hidden-modules:
trusted: False
import-dirs: F:\Projects\natural-induction\.cabal-sandbox\x86_64-windows-ghc-7.8.3\tf-random-0.5
library-dirs: F:\Projects\natural-induction\.cabal-sandbox\x86_64-windows-ghc-7.8.3\tf-random-0.5
hs-libraries: HStf-random-0.5
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.1-7c4827d45272c6220486aa798a981cbc
         primitive-0.5.2.1-93effc8cb78e0d5bbe893fc201d167d6
         random-1.0.1.1-1c39aaa78f370b133a79ccf1ef25922b
         time-1.4.2-10261674b91c0791587926806ccad1bb
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: F:\Projects\natural-induction\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.3\tf-random-0.5\html\tf-random.haddock
haddock-html: F:\Projects\natural-induction\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.3\tf-random-0.5\html
